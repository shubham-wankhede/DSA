/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 /**
 
Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

Example 1:
Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:
Input: root = [1]
Output: ["1"]
 
Constraints:
The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100
  */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        binaryTreePath(root, list, "");
        return list;
    }

    public void binaryTreePath(TreeNode root, List<String> result, String s){
        if(root==null) return;
        if(root.left == null && root.right == null){
            result.add(s+root.val);
            return;
        }
        s = s+root.val+"->";
        binaryTreePath(root.left,result,s);
        binaryTreePath(root.right,result,s);
    }

    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        if(root==null) return list;

        Stack<TreeNode> stack = new Stack<>();
        Stack<String> strs = new Stack<>();
        stack.push(root);
        strs.push(""+root.val);

        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            if(node==null) continue;

            String s = strs.pop();

            if(node.left == null && node.right == null) {
                list.add(s);
            }

            if(node.right != null){
                stack.push(node.right);
                strs.push(s+"->"+node.right.val);
            }

            if(node.left != null){
                stack.push(node.left);
                strs.push(s+"->"+node.left.val);
            }
        }
        return list;
    }
}
