/**
Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []
 

Constraints:
The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        return mergeSort(head);
    }

    public ListNode mergeSort(ListNode head){
        if(head==null || head.next==null){
            return head;
        }

        ListNode middle = middle(head);
        ListNode f = mergeSort(head);
        ListNode s = mergeSort(middle);
        return merge(f,s);
    }

    public ListNode merge(ListNode first, ListNode second){
        ListNode start = new ListNode();
        ListNode dummy = start;
        while(first!=null && second != null){
            if(first.val<second.val){
                dummy.next = first;
                first = first.next;
            }else{
                dummy.next = second;
                second = second.next;
            }
            dummy = dummy.next;
        }

        dummy.next = (first == null) ? second : first;
        return start.next;    
    }

    public ListNode middle(ListNode head){
        ListNode slow = null;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = (slow == null) ? head : slow.next;
        }

        ListNode mid = slow.next;
        slow.next = null;
        return mid;
    }
}
