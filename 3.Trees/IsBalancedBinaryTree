/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        return Math.abs(height(root.left)-height(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right);   
    }

    public int height(TreeNode node){
        if(node==null) return 0;
        return Math.max(height(node.left),height(node.right))+1;
    }

    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;

        return height(root) == -1 ? false : true;
    }

    public int height(TreeNode node){
        if(node == null)
            return 0;

        int left = height(node.left);
        int right = height(node.right);

        if(left==-1 || right==-1 || Math.abs(left-right) > 1)
            return -1;

        return Math.max(left,right)+1;
    }
}
