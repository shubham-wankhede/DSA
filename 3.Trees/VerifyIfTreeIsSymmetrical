/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  
    //Recursive solution time : 0(n) space : 0(1) 
    public boolean isSymmetric(TreeNode root) {
        return helper(root.left,root.right);
    }

    public boolean helper(TreeNode p, TreeNode q){
        if(p==null && q==null)
            return true;
        
        if(p==null ||  q==null || p.val!=q.val){
            return false;
        }

        return helper(p.left,q.right) && helper(p.right,q.left);
    }



    //Iterative time : 0(n) space : 0(n) - because we have to store the elements in queue
    public boolean isSymmetric(TreeNode root) {
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);

        while(!queue.isEmpty()){
            TreeNode left = queue.remove();
            TreeNode right = queue.remove();

            if(left==null && right==null)
                continue;

            if(left==null || right==null || left.val != right.val)
                return false;
            
            queue.add(left.left);
            queue.add(right.right);
            queue.add(left.right);
            queue.add(right.left);
        }

        return true;
    }

}
